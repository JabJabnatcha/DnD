// <auto-generated />
using DndBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DndBackend.Migrations
{
    [DbContext(typeof(DndDbContext))]
    partial class DndDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Layer_Domain.Entities.Alignment", b =>
                {
                    b.Property<int>("AlignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlignmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlignmentId");

                    b.ToTable("Alignments");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("AlignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("charracter_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Layer_Domain.Entities.ClassLevelBonus", b =>
                {
                    b.Property<int>("ClassLevelBonusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassLevelBonusId"));

                    b.Property<int>("Agi_class")
                        .HasColumnType("int");

                    b.Property<int>("Cha_class")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Con_class")
                        .HasColumnType("int");

                    b.Property<int>("Int_class")
                        .HasColumnType("int");

                    b.Property<int>("Level_class")
                        .HasColumnType("int");

                    b.Property<int>("Str_class")
                        .HasColumnType("int");

                    b.Property<int>("Wis_class")
                        .HasColumnType("int");

                    b.HasKey("ClassLevelBonusId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassLevelBonus");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<int>("Agi_race")
                        .HasColumnType("int");

                    b.Property<int>("Cha_race")
                        .HasColumnType("int");

                    b.Property<int>("Con_race")
                        .HasColumnType("int");

                    b.Property<int>("Int_race")
                        .HasColumnType("int");

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Str_race")
                        .HasColumnType("int");

                    b.Property<int>("Wis_race")
                        .HasColumnType("int");

                    b.HasKey("RaceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Layer_Domain.Entities.StatusBase", b =>
                {
                    b.Property<int>("StatusBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusBaseId"));

                    b.Property<int>("Agi")
                        .HasColumnType("int");

                    b.Property<int>("Cha")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Con")
                        .HasColumnType("int");

                    b.Property<int>("Int")
                        .HasColumnType("int");

                    b.Property<int>("Str")
                        .HasColumnType("int");

                    b.Property<int>("Wis")
                        .HasColumnType("int");

                    b.HasKey("StatusBaseId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("StatusBases");
                });

            modelBuilder.Entity("Layer_Domain.Entities.StatusBonus", b =>
                {
                    b.Property<int>("StatusBonusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusBonusId"));

                    b.Property<int>("AgiBonus")
                        .HasColumnType("int");

                    b.Property<int>("BonusStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ChaBonus")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ConBonus")
                        .HasColumnType("int");

                    b.Property<int>("IntBonus")
                        .HasColumnType("int");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StrBonus")
                        .HasColumnType("int");

                    b.Property<int>("WisBonus")
                        .HasColumnType("int");

                    b.HasKey("StatusBonusId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("StatusBonus");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Alignment", "Alignment")
                        .WithMany("Characters")
                        .HasForeignKey("AlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Class", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Race", "Race")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alignment");

                    b.Navigation("Class");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Layer_Domain.Entities.ClassLevelBonus", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Class", "Class")
                        .WithMany("ClassLevelBonuses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Layer_Domain.Entities.StatusBase", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Character", "Character")
                        .WithOne("StatusBase")
                        .HasForeignKey("Layer_Domain.Entities.StatusBase", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Layer_Domain.Entities.StatusBonus", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Character", "Character")
                        .WithOne("StatusBonus")
                        .HasForeignKey("Layer_Domain.Entities.StatusBonus", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Alignment", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.Navigation("StatusBase")
                        .IsRequired();

                    b.Navigation("StatusBonus")
                        .IsRequired();
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ClassLevelBonuses");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
