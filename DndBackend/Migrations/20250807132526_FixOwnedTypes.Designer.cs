// <auto-generated />
using Layer_Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DndBackend.Migrations
{
    [DbContext(typeof(DndDbContext))]
    [Migration("20250807132526_FixOwnedTypes")]
    partial class FixOwnedTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Layer_Domain.Entities.Alignment", b =>
                {
                    b.Property<int>("AlignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlignmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlignmentId");

                    b.ToTable("Alignments");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("AlignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("charracter_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Layer_Domain.Entities.ClassLevelBonus", b =>
                {
                    b.Property<int>("ClassLevelBonusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassLevelBonusId"));

                    b.Property<int>("Agi_class")
                        .HasColumnType("int");

                    b.Property<int>("Cha_class")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Con_class")
                        .HasColumnType("int");

                    b.Property<int>("Int_class")
                        .HasColumnType("int");

                    b.Property<int>("Level_class")
                        .HasColumnType("int");

                    b.Property<int>("Str_class")
                        .HasColumnType("int");

                    b.Property<int>("Wis_class")
                        .HasColumnType("int");

                    b.HasKey("ClassLevelBonusId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassLevelBonus");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<int>("Agi_race")
                        .HasColumnType("int");

                    b.Property<int>("Cha_race")
                        .HasColumnType("int");

                    b.Property<int>("Con_race")
                        .HasColumnType("int");

                    b.Property<int>("Int_race")
                        .HasColumnType("int");

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Str_race")
                        .HasColumnType("int");

                    b.Property<int>("Wis_race")
                        .HasColumnType("int");

                    b.HasKey("RaceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Alignment", "Alignment")
                        .WithMany("Characters")
                        .HasForeignKey("AlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Class", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Race", "Race")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Layer_Domain.Entities.StatusBase", "StatusBase", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<int>("Agi")
                                .HasColumnType("int");

                            b1.Property<int>("Cha")
                                .HasColumnType("int");

                            b1.Property<int>("Con")
                                .HasColumnType("int");

                            b1.Property<int>("Int")
                                .HasColumnType("int");

                            b1.Property<int>("StatusBaseId")
                                .HasColumnType("int");

                            b1.Property<int>("Str")
                                .HasColumnType("int");

                            b1.Property<int>("Wis")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.WithOwner("Character")
                                .HasForeignKey("CharacterId");

                            b1.Navigation("Character");
                        });

                    b.OwnsOne("Layer_Domain.Entities.StatusBonus", "StatusBonus", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<int>("AgiBonus")
                                .HasColumnType("int");

                            b1.Property<int>("ChaBonus")
                                .HasColumnType("int");

                            b1.Property<int>("ConBonus")
                                .HasColumnType("int");

                            b1.Property<int>("IntBonus")
                                .HasColumnType("int");

                            b1.Property<int>("StrBonus")
                                .HasColumnType("int");

                            b1.Property<int>("WisBonus")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.Navigation("Alignment");

                    b.Navigation("Class");

                    b.Navigation("Race");

                    b.Navigation("StatusBase")
                        .IsRequired();

                    b.Navigation("StatusBonus")
                        .IsRequired();
                });

            modelBuilder.Entity("Layer_Domain.Entities.ClassLevelBonus", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Class", "Class")
                        .WithMany("ClassLevelBonuses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Alignment", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ClassLevelBonuses");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
