// <auto-generated />
using Layer_Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DndBackend.Migrations
{
    [DbContext(typeof(DndDbContext))]
    [Migration("20250831151231_CharacterSkillUpdate")]
    partial class CharacterSkillUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterFeature", b =>
                {
                    b.Property<int>("CharacterCharId")
                        .HasColumnType("int");

                    b.Property<int>("FeaturesFeatureId")
                        .HasColumnType("int");

                    b.HasKey("CharacterCharId", "FeaturesFeatureId");

                    b.HasIndex("FeaturesFeatureId");

                    b.ToTable("CharacterFeature");
                });

            modelBuilder.Entity("CharacterItem", b =>
                {
                    b.Property<int>("CharacterCharId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsItemId")
                        .HasColumnType("int");

                    b.HasKey("CharacterCharId", "ItemsItemId");

                    b.HasIndex("ItemsItemId");

                    b.ToTable("CharacterItem");
                });

            modelBuilder.Entity("CharacterSpell", b =>
                {
                    b.Property<int>("CharacterCharId")
                        .HasColumnType("int");

                    b.Property<int>("SpellsSpellId")
                        .HasColumnType("int");

                    b.HasKey("CharacterCharId", "SpellsSpellId");

                    b.HasIndex("SpellsSpellId");

                    b.ToTable("CharacterSpell");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.Property<int>("CharId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharId"));

                    b.Property<int>("Alignment")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cha")
                        .HasColumnType("int");

                    b.Property<string>("CharName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Con")
                        .HasColumnType("int");

                    b.Property<int>("Dex")
                        .HasColumnType("int");

                    b.Property<string>("ExtraDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeightCm")
                        .HasColumnType("int");

                    b.Property<int>("Int")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("ScaleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScarOrMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkinColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Str")
                        .HasColumnType("int");

                    b.Property<int?>("SubclassId")
                        .HasColumnType("int");

                    b.Property<int?>("SubraceId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeightKg")
                        .HasColumnType("int");

                    b.Property<int>("Wis")
                        .HasColumnType("int");

                    b.HasKey("CharId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SubclassId");

                    b.HasIndex("SubraceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class.ClassChatacter", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryAbility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class.Subclass", b =>
                {
                    b.Property<int>("SubClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubClassId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("SubClassDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("Subclasses");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<int?>("ClassChatacterClassId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FeatureDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelRequired")
                        .HasColumnType("int");

                    b.Property<int?>("RaceCharacterRaceId")
                        .HasColumnType("int");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SubclassId")
                        .HasColumnType("int");

                    b.Property<int?>("SubraceId")
                        .HasColumnType("int");

                    b.HasKey("FeatureId");

                    b.HasIndex("ClassChatacterClassId");

                    b.HasIndex("RaceCharacterRaceId");

                    b.HasIndex("SubclassId");

                    b.HasIndex("SubraceId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Items.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("ItemCategory")
                        .HasColumnType("int");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasDiscriminator<int>("ItemCategory");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race.RaceCharacter", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<int>("HeightMaxCm")
                        .HasColumnType("int");

                    b.Property<int>("HeightMinCm")
                        .HasColumnType("int");

                    b.Property<string>("RaceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeedBase")
                        .HasColumnType("int");

                    b.Property<int>("WeightMaxKg")
                        .HasColumnType("int");

                    b.Property<int>("WeightMinKg")
                        .HasColumnType("int");

                    b.HasKey("RaceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race.Subrace", b =>
                {
                    b.Property<int>("SubraceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubraceId"));

                    b.Property<int>("ChaBonus")
                        .HasColumnType("int");

                    b.Property<int>("ConBonus")
                        .HasColumnType("int");

                    b.Property<int>("DexBonus")
                        .HasColumnType("int");

                    b.Property<int>("IntBonus")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("StrBonus")
                        .HasColumnType("int");

                    b.Property<string>("SubRaceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubRaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WisBonus")
                        .HasColumnType("int");

                    b.HasKey("SubraceId");

                    b.HasIndex("RaceId");

                    b.ToTable("Subraces");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<int>("Acrobatics")
                        .HasColumnType("int");

                    b.Property<bool>("AcrobaticsProficient")
                        .HasColumnType("bit");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("int");

                    b.Property<bool>("AnimalHandlingProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Arcana")
                        .HasColumnType("int");

                    b.Property<bool>("ArcanaProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Athletics")
                        .HasColumnType("int");

                    b.Property<bool>("AthleticsProficient")
                        .HasColumnType("bit");

                    b.Property<int>("CharId")
                        .HasColumnType("int");

                    b.Property<int>("Deception")
                        .HasColumnType("int");

                    b.Property<bool>("DeceptionProficient")
                        .HasColumnType("bit");

                    b.Property<int>("History")
                        .HasColumnType("int");

                    b.Property<bool>("HistoryProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Insight")
                        .HasColumnType("int");

                    b.Property<bool>("InsightProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Intimidation")
                        .HasColumnType("int");

                    b.Property<bool>("IntimidationProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Investigation")
                        .HasColumnType("int");

                    b.Property<bool>("InvestigationProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Medicine")
                        .HasColumnType("int");

                    b.Property<bool>("MedicineProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Nature")
                        .HasColumnType("int");

                    b.Property<bool>("NatureProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Perception")
                        .HasColumnType("int");

                    b.Property<bool>("PerceptionProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<bool>("PerformanceProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Persuasion")
                        .HasColumnType("int");

                    b.Property<bool>("PersuasionProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<bool>("ReligionProficient")
                        .HasColumnType("bit");

                    b.Property<int>("SleightOfHand")
                        .HasColumnType("int");

                    b.Property<bool>("SleightOfHandProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Stealth")
                        .HasColumnType("int");

                    b.Property<bool>("StealthProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Survival")
                        .HasColumnType("int");

                    b.Property<bool>("SurvivalProficient")
                        .HasColumnType("bit");

                    b.HasKey("SkillId");

                    b.HasIndex("CharId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Spells.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellId"));

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DamageDice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DamageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConcentration")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresSavingThrow")
                        .HasColumnType("bit");

                    b.Property<string>("SavingThrowAbility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Items.Armor", b =>
                {
                    b.HasBaseType("Layer_Domain.Entities.Items.Item");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("MaxDexBonus")
                        .HasColumnType("int");

                    b.Property<bool>("StealthDisadvantage")
                        .HasColumnType("bit");

                    b.Property<int>("StrengthRequirement")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Layer_Domain.Entities.Items.Consumable", b =>
                {
                    b.HasBaseType("Layer_Domain.Entities.Items.Item");

                    b.Property<int>("DurationInRounds")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SavingThrow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Layer_Domain.Entities.Items.Equipment", b =>
                {
                    b.HasBaseType("Layer_Domain.Entities.Items.Item");

                    b.Property<int>("Durability")
                        .HasColumnType("int");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Layer_Domain.Entities.Items.Tool", b =>
                {
                    b.HasBaseType("Layer_Domain.Entities.Items.Item");

                    b.Property<string>("SpecialFeature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToolType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Layer_Domain.Entities.Items.Weapon", b =>
                {
                    b.HasBaseType("Layer_Domain.Entities.Items.Item");

                    b.Property<string>("DamageDice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finesse")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<bool>("TwoHanded")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("CharacterFeature", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterCharId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterItem", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterCharId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Items.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSpell", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterCharId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Spells.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Class.ClassChatacter", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Race.RaceCharacter", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Layer_Domain.Entities.Class.Subclass", "Subclass")
                        .WithMany()
                        .HasForeignKey("SubclassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Layer_Domain.Entities.Race.Subrace", "Subrace")
                        .WithMany()
                        .HasForeignKey("SubraceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");

                    b.Navigation("Race");

                    b.Navigation("Subclass");

                    b.Navigation("Subrace");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class.Subclass", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Class.ClassChatacter", "Class")
                        .WithMany("Subclasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Feature", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Class.ClassChatacter", null)
                        .WithMany("Features")
                        .HasForeignKey("ClassChatacterClassId");

                    b.HasOne("Layer_Domain.Entities.Race.RaceCharacter", null)
                        .WithMany("Features")
                        .HasForeignKey("RaceCharacterRaceId");

                    b.HasOne("Layer_Domain.Entities.Class.Subclass", null)
                        .WithMany("Features")
                        .HasForeignKey("SubclassId");

                    b.HasOne("Layer_Domain.Entities.Race.Subrace", null)
                        .WithMany("Features")
                        .HasForeignKey("SubraceId");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race.Subrace", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Race.RaceCharacter", "Race")
                        .WithMany("Subraces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Skill", b =>
                {
                    b.HasOne("Layer_Domain.Entities.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Character", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class.ClassChatacter", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Subclasses");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Class.Subclass", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race.RaceCharacter", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Subraces");
                });

            modelBuilder.Entity("Layer_Domain.Entities.Race.Subrace", b =>
                {
                    b.Navigation("Features");
                });
#pragma warning restore 612, 618
        }
    }
}
